[project]
  authors = [
    { name = "Sasan Jacob Rasti", email = "sasan_jacob.rasti@tu-dresden.de" },

    { name = "Felix Flatter", email = "felix.flatter@rptu.de" },
    { name = "Guntram Pressmair" },
    { name = "JÃ¶rg Dickert" },
  ]
  dependencies = [
    "aiofiles>=24.1.0",
    "aiohttp[speedups]>=3.10.2",
    "attrs>=24.2.0",
    "cattrs>=23.2.3",
    "click>=8.1.7",
    "geopandas>=1.0.1",
    "loguru>=0.7.2",
    "matplotlib>=3.9.1.post1",
    "netCDF4>=1.7.1.post1",
    "numpy>=2.0.1",
    "open-mastr>=0.14.4",
    "openpyxl>=3.1.5",
    "pandas>=2.2.2",
    "pvlib>=0.11.0",
    "pyarrow>=17.0.0",
    "pyproj>=3.6.1",
    "pytz>=2024.1",
    "pyyaml>=6.0.2",
    "rasterio>=1.3.10",
    "requests>=2.32.3",
    "scipy>=1.14.0",
    "shapely>=2.0.5",
    "tqdm>=4.66.5",
    "windpowerlib>=0.2.2",
  ]
  description = "A toolbox to create multi-energy power time series for different technologies in steady-state simulations of energy systems."
  license = { file = "LICENSE" }
  name = "pyramecium-technology-models"
  readme = { file = "README.md", content-type = "text/markdown" }
  requires-python = ">=3.12"
  version = "1.0.1"

  [project.urls]
    homepage = "https://github.com/ieeh-tu-dresden/power-system-technology-models"

  [project.scripts]
    convert-clc-europe-file       = "utils.convert_clc_europe_file:convert"
    convert-clc-germany-files     = "utils.convert_clc_germany_files:convert"
    convert-dwd-try-files         = "utils.convert_dwd_try_files:convert"
    convert-time-zones-file       = "utils.convert_time_zones_file:convert"
    convert-vdi4655-profile-files = "utils.convert_vdi4655_profile_files:convert"
    convert-zip-codes-file        = "utils.convert_zip_codes_file:convert"
    create-dickert-households     = "utils.create_dickert_households:convert"
    create-dwd-try-index-file     = "utils.create_dwd_try_index_file:create"

[build-system]
  build-backend = "hatchling.build"
  requires      = ["hatchling"]

[tool.uv]
  dev-dependencies = [
    "commitizen>=3.28.0",
    "ipykernel>=6.29.5",
    "mypy>=1.11.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "pytest>=8.3.1",
    "ruff>=0.5.5",
    "types-PyYAML>=6.0.12.20240808",
    "types-aiofiles>=24.1.0.20240626",
    "types-pytz>=2024.1.0.20240417",
    "types-requests>=2.32.0.20240712",
  ]

[tool.hatch.metadata]
  allow-direct-references = true

[tool.hatch.build.targets.wheel]
  packages = ["src/pstm"]

[tool.ruff]
  exclude     = ["*.ipynb"]
  line-length = 120

  [tool.ruff.lint]
    ignore = [
      "ANN002",
      "ANN003",
      "ANN101",
      "ANN102",
      "C901",
      "D100",
      "D101",
      "D102",
      "D103",
      "D104",
      "D105",
      "D106",
      "D107",
      "D202",
      "D203",
      "D401",
      "E402",
      "E501",
    ]
    select = ["ALL"]

    [tool.ruff.lint.flake8-type-checking]
      runtime-evaluated-decorators = ["attrs.define"]

    [tool.ruff.lint.isort]
      force-single-line = true

    [tool.ruff.lint.pydocstyle]
      convention = "pep257"

    [tool.ruff.lint.pep8-naming]
      classmethod-decorators = ["classmethod"]

    [tool.ruff.lint.pylint]
      max-args = 10

    [tool.ruff.lint.per-file-ignores]
      "tests/*" = ["ANN001", "ANN201", "INP001", "S101"]

    [tool.ruff.lint.flake8-import-conventions.extend-aliases]
      "collections.abc"  = "cabc"
      "datetime"         = "dt"
      "geopandas"        = "gpd"
      "numpy.typing"     = "npt"
      "rasterio"         = "rio"
      "shapely.geometry" = "shg"
      "typing"           = "t"

[tool.commitizen]
  name = "cz_conventional_commits"
  tag_format = "$version"
  version = "1.0.1"
  version_files = [
    "pyproject.toml:version",
    "src/pstm/__version__.py:VERSION",
  ]

[tool.mypy]
  enable_incomplete_feature = "NewGenericSyntax"
  follow_imports            = "normal"
  ignore_missing_imports    = true
  mypy_path                 = "src/pstm"
  namespace_packages        = true
  strict_optional           = true
  warn_no_return            = true
  warn_redundant_casts      = true
  warn_unused_ignores       = true

[tool.pytest.ini_options]
  python_files = "test_*.py"
  testpaths    = ["tests"]

[tool.coverage.run]
  branch = true
  omit   = ["__pypackages__/*", "build/*", "tests/*"]
  source = ["src/pstm"]

[tool.coverage.report]
  show_missing = true

[tool.coverage.xml]
  output = "coverage.xml"

[tool.pyright]
  exclude          = ["**/__pycache__"]
  typeCheckingMode = "off"
